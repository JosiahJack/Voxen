// Text shader
const char *textVertexShaderSource =
    "#version 450 core\n"
    "\n"
    "layout(location = 0) in vec2 aPos;\n"
    "layout(location = 1) in vec2 aTexCoord;\n"
    "uniform mat4 projection;\n"
    "out vec2 TexCoord;\n"
    "\n"
    "void main() {\n"
    "    gl_Position = projection * vec4(aPos, 0.0, 1.0);\n"
    "    TexCoord = aTexCoord;\n"
    "}\n";

const char *textFragmentShaderSource =
    "#version 450 core\n"
    "\n"
    "in vec2 TexCoord;\n"
    "out vec4 FragColor;\n"
    "uniform sampler2D textTexture;\n"
    "uniform vec4 textColor;\n"
    "uniform vec2 texelSize;\n"
    "\n"
    "void main() {\n"
    "    vec4 sampled = texture(textTexture, TexCoord);\n"
    "    bool isOutline = false;\n"
    "\n"
    "    // Check if current pixel is transparent\n"
    "    if (sampled.a == 0.0) {\n"
    "        vec2 offsets[8] = vec2[](\n"
    "            vec2(-1.0, -1.0), vec2(0.0, -1.0), vec2(1.0, -1.0),\n"
    "            vec2(-1.0,  0.0),                  vec2(1.0,  0.0),\n"
    "            vec2(-1.0,  1.0), vec2(0.0,  1.0), vec2(1.0,  1.0)\n"
    "        );\n"
    "        \n"
    "        for (int i = 0; i < 8; i++) {\n"  // Sample 8 neighboring pixels
    "            vec4 neighbor = texture(textTexture, TexCoord + offsets[i] * texelSize);\n"
    "            if (neighbor.a > 0.0) {\n"
    "                isOutline = true;\n"
    "                break;\n"
    "            }\n"
    "        }\n"
    "    }\n"
    "\n"
    "    if (isOutline) {\n"
    "        FragColor = vec4(0.0, 0.0, 0.0, 1.0); // Black outline\n"
    "    } else if (sampled.a > 0.0) {\n"
    "        FragColor = vec4(textColor.rgb, sampled.a * textColor.a); // Text color\n"
    "    } else {\n"
    "        FragColor = vec4(0.0, 0.0, 0.0, 0.0); // Transparent background\n"
    "    }\n"
    "}\n";
