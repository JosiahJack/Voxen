// deferred_lighting.compute
// Compute shader for processing 
const char *deferredLighting_computeShader =
    "#version 450 core\n"
    "\n"
    "layout(local_size_x = 8, local_size_y = 8) in;\n"
    "\n"
    "// G-buffer inputs\n"
    "layout(rgba8,   binding = 0) uniform image2D inputImage;\n"
    "layout(rgba16f, binding = 1) uniform image2D inputNormals;\n"
    "layout(r32f,    binding = 2) uniform image2D inputDepth;\n"
    "layout(rgba32f, binding = 3) uniform image2D inputWorldPos;\n"
    "layout(rgba8,   binding = 4) uniform image2D outputImage;\n"
    "\n"
    "// Light buffer\n"
    "layout(std430, binding = 5) buffer LightBuffer {\n"
    "    float lights[];\n"
    "};\n"
    "\n"
    "// Vertex buffers (one per model, bound as SSBOs)\n"
    "#define MODEL_COUNT 3\n"
    "layout(std430, binding = 6) buffer VertexBuffer0 { float vertices0[]; };\n"
    "layout(std430, binding = 7) buffer VertexBuffer1 { float vertices1[]; };\n"
    "layout(std430, binding = 8) buffer VertexBuffer2 { float vertices2[]; };\n"
    "\n"
    "// Model instance transforms\n"
    "layout(std430, binding = 9) buffer InstanceBuffer {\n"
    "    mat4 instanceMatrices[];\n"
    "};\n"
    "\n"
    "// Uniforms from deferred shader\n"
    "uniform uint screenWidth;\n"
    "uniform uint screenHeight;\n"
    "uniform float lightFarPlane = 20.0;\n"
    "\n"
    "// Uniforms for ray tracing\n"
    "uniform int shadowsEnabled;\n"
    "uniform int triangleCounts[MODEL_COUNT]; // Triangles per model\n"
    "uniform int instanceCount;\n"
    "\n"
    "// --- Ray-Triangle Intersection (MÃ¶ller-Trumbore) ---\n"
    "bool RayTriangle(vec3 origin, vec3 dir, vec3 v0, vec3 v1, vec3 v2, out float t) {\n"
    "    vec3 edge1 = v1 - v0;\n"
    "    vec3 edge2 = v2 - v0;\n"
    "    vec3 h = cross(dir, edge2);\n"
    "    float a = dot(edge1, h);\n"
    "    if (abs(a) < 1e-8) return false;\n"
    "\n"
    "    float f = 1.0 / a;\n"
    "    vec3 s = origin - v0;\n"
    "    float u = f * dot(s, h);\n"
    "    if (u < 0.0 || u > 1.0) return false;\n"
    "\n"
    "    vec3 q = cross(s, edge1);\n"
    "    float v = f * dot(dir, q);\n"
    "    if (v < 0.0 || u + v > 1.0) return false;\n"
    "\n"
    "    t = f * dot(edge2, q);\n"
    "    return t > 0.001;\n"
    "}\n"
    "\n"
    "// --- Trace Ray for Shadow ---\n"
    "bool TraceRay(vec3 origin, vec3 dir, float maxDist) {\n"
    "    for (int instance = 0; instance < instanceCount; instance++) {\n"
    "        mat4 model = instanceMatrices[instance];\n"
    "        mat4 invModel = inverse(model);\n"
    "        vec3 localOrigin = (invModel * vec4(origin, 1.0)).xyz;\n"
    "        vec3 localDir = (invModel * vec4(dir, 0.0)).xyz;\n"
    "\n"
    "        for (int model = 0; model < MODEL_COUNT; model++) {\n"
    "            int triCount = triangleCounts[model];\n"
    "            for (int tri = 0; tri < triCount; tri++) {\n"
    "                int base = tri * 24; // 3 vertices * 8 floats per vertex\n"
    "                vec3 v0, v1, v2;\n"
    "                if (model == 0) {\n"
    "                    v0 = vec3(vertices0[base + 0], vertices0[base + 1], vertices0[base + 2]);\n"
    "                    v1 = vec3(vertices0[base + 8], vertices0[base + 9], vertices0[base + 10]);\n"
    "                    v2 = vec3(vertices0[base + 16], vertices0[base + 17], vertices0[base + 18]);\n"
    "                } else if (model == 1) {\n"
    "                    v0 = vec3(vertices1[base + 0], vertices1[base + 1], vertices1[base + 2]);\n"
    "                    v1 = vec3(vertices1[base + 8], vertices1[base + 9], vertices1[base + 10]);\n"
    "                    v2 = vec3(vertices1[base + 16], vertices1[base + 17], vertices1[base + 18]);\n"
    "                } else if (model == 2) {\n"
    "                    v0 = vec3(vertices2[base + 0], vertices2[base + 1], vertices2[base + 2]);\n"
    "                    v1 = vec3(vertices2[base + 8], vertices2[base + 9], vertices2[base + 10]);\n"
    "                    v2 = vec3(vertices2[base + 16], vertices2[base + 17], vertices2[base + 18]);\n"
    "                }\n"
    "                float t;\n"
    "                if (RayTriangle(localOrigin, localDir, v0, v1, v2, t) && t < maxDist) {\n"
    "                    return true;\n"
    "                }\n"
    "            }\n"
    "        }\n"
    "    }\n"
    "    return false;\n"
    "}\n"
    "\n"
    "// --- Main Compute Shader ---\n"
    "void main() {\n"
    "    uvec2 pixel = gl_GlobalInvocationID.xy;\n"
    "    if (pixel.x >= screenWidth || pixel.y >= screenHeight) return;\n"
    "\n"
    "    vec3 worldPos = imageLoad(inputWorldPos, ivec2(pixel)).xyz;\n"
    "    vec4 color = imageLoad(inputImage, ivec2(pixel));\n"
    "    vec3 normal = normalize(imageLoad(inputNormals, ivec2(pixel)).xyz * 2.0 - 1.0);\n"
    "    float depth = imageLoad(inputDepth, ivec2(pixel)).r;\n"
    "\n"
    "    vec3 lighting = vec3(0.0);\n"
    "    int lightStride = 12;\n"
    "\n"
    "    for (int i = 0; i < lights.length(); i += lightStride) {\n"
    "        float intensity = lights[i + 3];\n"
    "        if (intensity < 0.015) continue;\n"
    "\n"
    "        float range = lights[i + 4];\n"
    "        vec3 lightPos = vec3(lights[i + 0], lights[i + 1], lights[i + 2]);\n"
    "        vec3 toLight = lightPos - worldPos;\n"
    "        float dist = length(toLight);\n"
    "        if (dist > range) continue;\n"
    "\n"
    "        vec3 lightDir = normalize(toLight);\n"
    "\n"
    "        float spotAng = lights[i + 5];\n"
    "        vec3 spotDir = vec3(lights[i + 6], lights[i + 7], lights[i + 8]);\n"
    "        vec3 lightColor = vec3(lights[i + 9], lights[i + 10], lights[i + 11]);\n"
    "\n"
    "        float spotFalloff = 1.0;\n"
    "        if (spotAng > 0.0) {\n"
    "            float spotdot = dot(spotDir, -lightDir);\n"
    "            float cosAngle = cos(radians(spotAng / 2.0));\n"
    "            if (spotdot < cosAngle) continue;\n"
    "            float cosOuterAngle = cos(radians(spotAng / 2.0));\n"
    "            float cosInnerAngle = cos(radians(spotAng * 0.8 / 2.0));\n"
    "            spotFalloff = smoothstep(cosOuterAngle, cosInnerAngle, spotdot);\n"
    "            if (spotFalloff <= 0.0) continue;\n"
    "        }\n"
    "\n"
    "        float shadow = 1.0;\n"
    "        if (shadowsEnabled > 0 && intensity > 0.5 && range > 1.5) {\n"
    "            if (TraceRay(worldPos + normal * 0.01, lightDir, dist)) {\n"
    "                shadow = 0.0;\n"
    "            }\n"
    "        }\n"
    "\n"
    "        float attenuation = (1.0 - (dist / range)) * max(dot(normal, lightDir), 0.0);\n"
    "        attenuation *= shadow;\n"
    "\n"
    "        lighting += color.rgb * intensity * attenuation * lightColor * spotFalloff;\n"
    "    }\n"
    "\n"
    "    imageStore(outputImage, ivec2(pixel), vec4(lighting, color.a));\n"
    "}\n";
