// lightvolume.glsl: Shader for rendering a light volume mesh
const char *lightVolumeVertexShaderSource =
    "#version 450 core\n"
    "\n"
    "layout(location = 0) in vec3 aPos;\n"
    "layout(location = 1) in vec3 aNormal;\n"
    "layout(location = 2) in vec2 aTexCoord;\n"
    "layout(location = 3) in int aTexIndex;\n"
    "layout(location = 4) in int aGlowIndex;\n"
    "layout(location = 5) in int aSpecIndex;\n"
    "layout(location = 6) in int aNormalIndex;\n"
    "layout(location = 7) in int aModelIndex;\n"
    "layout(location = 8) in int aInstanceIndex;\n"
    "uniform int textureCount;\n"
    "uniform mat4 matrix;\n"
    "uniform mat4 view;\n"
    "uniform mat4 projection;\n"
    "out vec3 FragPos;\n"
    "out vec3 Normal;\n"
    "out vec2 TexCoord;\n"
    "flat out int TexIndex;\n"
    "flat out int GlowIndex;\n"
    "flat out int SpecIndex;\n"
    "flat out int NormalIndex;\n"
    "flat out int TextureCount;\n"
    "flat out int InstanceIndex;\n"
    "flat out int ModelIndex;\n"
    "\n"
    "void main() {\n"
    "    FragPos = vec3(matrix * vec4(aPos, 1.0));\n" // Convert vertex from the model's local space into world space
    "    Normal = mat3(transpose(inverse(matrix))) * aNormal;\n"
    "    TexCoord = aTexCoord;\n" // Pass along data to each vertex, shared for whole tri's pixels.
    "    TexIndex = aTexIndex;\n"
    "    GlowIndex = aGlowIndex;\n"
    "    SpecIndex = aSpecIndex;\n"
    "    NormalIndex = aNormalIndex;\n"
    "    TextureCount = textureCount;\n"
    "    ModelIndex = aModelIndex;\n"
    "    InstanceIndex = aInstanceIndex;\n"
    "    gl_Position = projection * view * vec4(FragPos, 1.0);\n"
    "}\n";
