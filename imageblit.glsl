// imageblit.glsl
// Full screen quad unlit textured for presenting image buffers such as results
// from compute shaders, image effects, post-processing, etc..
const char *quadVertexShaderSource =
    "#version 450 core\n"
    "layout(location = 0) in vec2 aPos;\n"
    "layout(location = 1) in vec2 aTexCoord;\n"
    "out vec2 TexCoord;\n"
    "void main() {\n"
    "    gl_Position = vec4(aPos, 0.0, 1.0);\n"
    "    TexCoord = aTexCoord;\n"
    "}\n";

const char* quadFragmentShaderSource =
    "#version 450 core\n"
    "in vec2 TexCoord;\n"
    "out vec4 FragColor;\n"
    "uniform sampler2D tex;\n"
    "uniform int debugView;\n"
    "uniform int debugValue;\n"
    "uniform uint screenWidth;\n"
    "uniform uint screenHeight;\n"
    "layout(rgba32f, binding = 4) uniform image2D outputImage;\n"
    "const int SSR_RES = 2;\n"
    "void main() {\n"
    "    FragColor = texture(tex, TexCoord);\n"
    "    if (debugView == 0) {\n"
    "        ivec2 pixel = ivec2(TexCoord * vec2(screenWidth/SSR_RES, screenHeight/SSR_RES));\n"
    "        vec4 reflectionColor = vec4(0.0);\n"
    "        float weights[9] = float[](0.1, 0.1, 0.1, 0.1, 0.2, 0.1, 0.1, 0.1, 0.1);\n"
    "        ivec2 offsets[9] = ivec2[](\n"
    "            ivec2(-1, -1), ivec2(0, -1), ivec2(1, -1),\n"
    "            ivec2(-1,  0), ivec2(0,  0), ivec2(1,  0),\n"
    "            ivec2(-1,  1), ivec2(0,  1), ivec2(1,  1)\n"
    "        );\n"
    "        for (int i = 0; i < 9; ++i) {\n"
    "            ivec2 samplePixel = pixel + offsets[i];\n"
    "            samplePixel = clamp(samplePixel, ivec2(0), ivec2(int(screenWidth/SSR_RES)-1, int(screenHeight/SSR_RES)-1));\n"
    "            reflectionColor += imageLoad(outputImage, samplePixel) * weights[i];\n"
    "        }\n"
    "        FragColor += reflectionColor;\n"
    "    } else if (debugView == 7 || debugView == 10) {\n"
    "        FragColor = imageLoad(outputImage, ivec2(TexCoord * vec2(screenWidth/SSR_RES, screenHeight/SSR_RES)));\n"
    "    }\n"
    "}\n";
